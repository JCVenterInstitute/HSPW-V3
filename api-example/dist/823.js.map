{"version":3,"sources":["webpack://server/./node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js","webpack://server/./node_modules/@aws-sdk/token-providers/dist-es/constants.js","webpack://server/./node_modules/@aws-sdk/token-providers/dist-es/getSsoOidcClient.js","webpack://server/./node_modules/@aws-sdk/token-providers/dist-es/validateTokenExpiry.js","webpack://server/./node_modules/@aws-sdk/token-providers/dist-es/validateTokenKey.js","webpack://server/./node_modules/@aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js","webpack://server/./node_modules/@aws-sdk/token-providers/dist-es/fromSso.js","webpack://server/./node_modules/@aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js","webpack://server/./node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js","webpack://server/./node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js","webpack://server/./node_modules/@aws-sdk/credential-provider-sso/dist-es/fromSSO.js"],"names":["isSsoProfile","arg","sso_start_url","sso_account_id","sso_session","sso_region","sso_role_name","REFRESH_MESSAGE","ssoOidcClientsHash","validateTokenExpiry","token","expiration","getTime","Date","now","validateTokenKey","key","value","forRefresh","writeFile","lastRefreshAttemptTime","fromSso","init","async","logger","debug","profiles","profileName","profile","ssoSessionName","ssoSession","ssoSessionRequiredKey","ssoRegion","ssoToken","e","accessToken","expiresAt","existingToken","clientId","clientSecret","refreshToken","setTime","newSsoOidcToken","CreateTokenCommand","ssoOidcClient","SSOOIDCClient","region","getSsoOidcClient","send","grantType","getNewSsoOidcToken","expiresIn","newTokenExpiration","id","tokenFilepath","tokenString","JSON","stringify","writeSSOTokenToFile","toISOString","error","SHOULD_FAIL_CREDENTIAL_CHAIN","resolveSSOCredentials","ssoStartUrl","ssoAccountId","ssoRoleName","ssoClient","clientConfig","refreshMessage","_token","message","SSOClient","GetRoleCredentialsCommand","sso","Object","assign","ssoResp","accountId","roleName","roleCredentials","accessKeyId","secretAccessKey","sessionToken","credentialScope","validateSsoProfile","keys","join","fromSSO","session","conflictMsg"],"mappings":"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","file":"823.js","sourcesContent":["export const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","export const EXPIRE_WINDOW_MS = 5 * 60 * 1000;\nexport const REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;\n","const ssoOidcClientsHash = {};\nexport const getSsoOidcClient = async (ssoRegion) => {\n    const { SSOOIDCClient } = await import(\"./loadSsoOidc\");\n    if (ssoOidcClientsHash[ssoRegion]) {\n        return ssoOidcClientsHash[ssoRegion];\n    }\n    const ssoOidcClient = new SSOOIDCClient({ region: ssoRegion });\n    ssoOidcClientsHash[ssoRegion] = ssoOidcClient;\n    return ssoOidcClient;\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenExpiry = (token) => {\n    if (token.expiration && token.expiration.getTime() < Date.now()) {\n        throw new TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);\n    }\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenKey = (key, value, forRefresh = false) => {\n    if (typeof value === \"undefined\") {\n        throw new TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? \". Cannot refresh\" : \"\"}. ${REFRESH_MESSAGE}`, false);\n    }\n};\n","import { getSSOTokenFilepath } from \"@smithy/shared-ini-file-loader\";\nimport { promises as fsPromises } from \"fs\";\nconst { writeFile } = fsPromises;\nexport const writeSSOTokenToFile = (id, ssoToken) => {\n    const tokenFilepath = getSSOTokenFilepath(id);\n    const tokenString = JSON.stringify(ssoToken, null, 2);\n    return writeFile(tokenFilepath, tokenString);\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { getProfileName, getSSOTokenFromFile, loadSsoSessionData, parseKnownFiles, } from \"@smithy/shared-ini-file-loader\";\nimport { EXPIRE_WINDOW_MS, REFRESH_MESSAGE } from \"./constants\";\nimport { getNewSsoOidcToken } from \"./getNewSsoOidcToken\";\nimport { validateTokenExpiry } from \"./validateTokenExpiry\";\nimport { validateTokenKey } from \"./validateTokenKey\";\nimport { writeSSOTokenToFile } from \"./writeSSOTokenToFile\";\nconst lastRefreshAttemptTime = new Date(0);\nexport const fromSso = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/token-providers\", \"fromSso\");\n    const profiles = await parseKnownFiles(init);\n    const profileName = getProfileName(init);\n    const profile = profiles[profileName];\n    if (!profile) {\n        throw new TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);\n    }\n    else if (!profile[\"sso_session\"]) {\n        throw new TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);\n    }\n    const ssoSessionName = profile[\"sso_session\"];\n    const ssoSessions = await loadSsoSessionData(init);\n    const ssoSession = ssoSessions[ssoSessionName];\n    if (!ssoSession) {\n        throw new TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);\n    }\n    for (const ssoSessionRequiredKey of [\"sso_start_url\", \"sso_region\"]) {\n        if (!ssoSession[ssoSessionRequiredKey]) {\n            throw new TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);\n        }\n    }\n    const ssoStartUrl = ssoSession[\"sso_start_url\"];\n    const ssoRegion = ssoSession[\"sso_region\"];\n    let ssoToken;\n    try {\n        ssoToken = await getSSOTokenFromFile(ssoSessionName);\n    }\n    catch (e) {\n        throw new TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);\n    }\n    validateTokenKey(\"accessToken\", ssoToken.accessToken);\n    validateTokenKey(\"expiresAt\", ssoToken.expiresAt);\n    const { accessToken, expiresAt } = ssoToken;\n    const existingToken = { token: accessToken, expiration: new Date(expiresAt) };\n    if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {\n        return existingToken;\n    }\n    if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n    validateTokenKey(\"clientId\", ssoToken.clientId, true);\n    validateTokenKey(\"clientSecret\", ssoToken.clientSecret, true);\n    validateTokenKey(\"refreshToken\", ssoToken.refreshToken, true);\n    try {\n        lastRefreshAttemptTime.setTime(Date.now());\n        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion);\n        validateTokenKey(\"accessToken\", newSsoOidcToken.accessToken);\n        validateTokenKey(\"expiresIn\", newSsoOidcToken.expiresIn);\n        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);\n        try {\n            await writeSSOTokenToFile(ssoSessionName, {\n                ...ssoToken,\n                accessToken: newSsoOidcToken.accessToken,\n                expiresAt: newTokenExpiration.toISOString(),\n                refreshToken: newSsoOidcToken.refreshToken,\n            });\n        }\n        catch (error) {\n        }\n        return {\n            token: newSsoOidcToken.accessToken,\n            expiration: newTokenExpiration,\n        };\n    }\n    catch (error) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n};\n","import { getSsoOidcClient } from \"./getSsoOidcClient\";\nexport const getNewSsoOidcToken = async (ssoToken, ssoRegion) => {\n    const { CreateTokenCommand } = await import(\"./loadSsoOidc\");\n    const ssoOidcClient = await getSsoOidcClient(ssoRegion);\n    return ssoOidcClient.send(new CreateTokenCommand({\n        clientId: ssoToken.clientId,\n        clientSecret: ssoToken.clientSecret,\n        refreshToken: ssoToken.refreshToken,\n        grantType: \"refresh_token\",\n    }));\n};\n","import { fromSso as getSsoTokenProvider } from \"@aws-sdk/token-providers\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getSSOTokenFromFile } from \"@smithy/shared-ini-file-loader\";\nconst SHOULD_FAIL_CREDENTIAL_CHAIN = false;\nexport const resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, clientConfig, profile, }) => {\n    let token;\n    const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;\n    if (ssoSession) {\n        try {\n            const _token = await getSsoTokenProvider({ profile })();\n            token = {\n                accessToken: _token.token,\n                expiresAt: new Date(_token.expiration).toISOString(),\n            };\n        }\n        catch (e) {\n            throw new CredentialsProviderError(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);\n        }\n    }\n    else {\n        try {\n            token = await getSSOTokenFromFile(ssoStartUrl);\n        }\n        catch (e) {\n            throw new CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);\n        }\n    }\n    if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {\n        throw new CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    const { accessToken } = token;\n    const { SSOClient, GetRoleCredentialsCommand } = await import(\"./loadSso\");\n    const sso = ssoClient ||\n        new SSOClient(Object.assign({}, clientConfig ?? {}, {\n            region: clientConfig?.region ?? ssoRegion,\n        }));\n    let ssoResp;\n    try {\n        ssoResp = await sso.send(new GetRoleCredentialsCommand({\n            accountId: ssoAccountId,\n            roleName: ssoRoleName,\n            accessToken,\n        }));\n    }\n    catch (e) {\n        throw CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope } = {} } = ssoResp;\n    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {\n        throw new CredentialsProviderError(\"SSO returns an invalid temporary credential.\", SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration), credentialScope };\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport const validateSsoProfile = (profile) => {\n    const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;\n    if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {\n        throw new CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters \"sso_account_id\", ` +\n            `\"sso_region\", \"sso_role_name\", \"sso_start_url\". Got ${Object.keys(profile).join(\", \")}\\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);\n    }\n    return profile;\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName, loadSsoSessionData, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { isSsoProfile } from \"./isSsoProfile\";\nimport { resolveSSOCredentials } from \"./resolveSSOCredentials\";\nimport { validateSsoProfile } from \"./validateSsoProfile\";\nexport const fromSSO = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-sso\", \"fromSSO\");\n    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;\n    const { ssoClient } = init;\n    const profileName = getProfileName(init);\n    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {\n        const profiles = await parseKnownFiles(init);\n        const profile = profiles[profileName];\n        if (!profile) {\n            throw new CredentialsProviderError(`Profile ${profileName} was not found.`);\n        }\n        if (!isSsoProfile(profile)) {\n            throw new CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);\n        }\n        if (profile?.sso_session) {\n            const ssoSessions = await loadSsoSessionData(init);\n            const session = ssoSessions[profile.sso_session];\n            const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;\n            if (ssoRegion && ssoRegion !== session.sso_region) {\n                throw new CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);\n            }\n            if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {\n                throw new CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);\n            }\n            profile.sso_region = session.sso_region;\n            profile.sso_start_url = session.sso_start_url;\n        }\n        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(profile);\n        return resolveSSOCredentials({\n            ssoStartUrl: sso_start_url,\n            ssoSession: sso_session,\n            ssoAccountId: sso_account_id,\n            ssoRegion: sso_region,\n            ssoRoleName: sso_role_name,\n            ssoClient: ssoClient,\n            clientConfig: init.clientConfig,\n            profile: profileName,\n        });\n    }\n    else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {\n        throw new CredentialsProviderError(\"Incomplete configuration. The fromSSO() argument hash must include \" +\n            '\"ssoStartUrl\", \"ssoAccountId\", \"ssoRegion\", \"ssoRoleName\"');\n    }\n    else {\n        return resolveSSOCredentials({\n            ssoStartUrl,\n            ssoSession,\n            ssoAccountId,\n            ssoRegion,\n            ssoRoleName,\n            ssoClient,\n            clientConfig: init.clientConfig,\n            profile: profileName,\n        });\n    }\n};\n"],"sourceRoot":""}