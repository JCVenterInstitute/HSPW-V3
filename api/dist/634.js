exports.id=634,exports.ids=[634],exports.modules={3634:(e,t,a)=>{"use strict";a.r(t),a.d(t,{DEFAULT_MAX_RETRIES:()=>m,DEFAULT_TIMEOUT:()=>l,ENV_CMDS_AUTH_TOKEN:()=>v,ENV_CMDS_FULL_URI:()=>f,ENV_CMDS_RELATIVE_URI:()=>h,Endpoint:()=>y,fromContainerMetadata:()=>_,fromInstanceMetadata:()=>O,getInstanceMetadataEndpoint:()=>C,httpRequest:()=>i,providerConfigFromInit:()=>p});var n=a(2362),r=a(8835),o=a(4293),s=a(8605);function i(e){return new Promise(((t,a)=>{const r=(0,s.request)({method:"GET",...e,hostname:e.hostname?.replace(/^\[(.+)\]$/,"$1")});r.on("error",(e=>{a(Object.assign(new n.kb("Unable to connect to instance metadata service"),e)),r.destroy()})),r.on("timeout",(()=>{a(new n.kb("TimeoutError from instance metadata service")),r.destroy()})),r.on("response",(e=>{const{statusCode:s=400}=e;(s<200||300<=s)&&(a(Object.assign(new n.kb("Error response received from instance metadata service"),{statusCode:s})),r.destroy());const i=[];e.on("data",(e=>{i.push(e)})),e.on("end",(()=>{t(o.Buffer.concat(i)),r.destroy()}))})),r.end()}))}const c=e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.AccessKeyId&&"string"==typeof e.SecretAccessKey&&"string"==typeof e.Token&&"string"==typeof e.Expiration,d=e=>({accessKeyId:e.AccessKeyId,secretAccessKey:e.SecretAccessKey,sessionToken:e.Token,expiration:new Date(e.Expiration)}),l=1e3,m=0,p=({maxRetries:e=m,timeout:t=l})=>({maxRetries:e,timeout:t}),u=(e,t)=>{let a=e();for(let n=0;n<t;n++)a=a.catch(e);return a},f="AWS_CONTAINER_CREDENTIALS_FULL_URI",h="AWS_CONTAINER_CREDENTIALS_RELATIVE_URI",v="AWS_CONTAINER_AUTHORIZATION_TOKEN",_=(e={})=>{const{timeout:t,maxRetries:a}=p(e);return()=>u((async()=>{const e=await I(),a=JSON.parse(await E(t,e));if(!c(a))throw new n.mV("Invalid response received from instance metadata service.");return d(a)}),a)},E=async(e,t)=>(process.env[v]&&(t.headers={...t.headers,Authorization:process.env[v]}),(await i({...t,timeout:e})).toString()),w={localhost:!0,"127.0.0.1":!0},A={"http:":!0,"https:":!0},I=async()=>{if(process.env[h])return{hostname:"169.254.170.2",path:process.env[h]};if(process.env[f]){const e=(0,r.parse)(process.env[f]);if(!e.hostname||!(e.hostname in w))throw new n.mV(`${e.hostname} is not a valid container metadata service hostname`,!1);if(!e.protocol||!(e.protocol in A))throw new n.mV(`${e.protocol} is not a valid container metadata service protocol`,!1);return{...e,port:e.port?parseInt(e.port,10):void 0}}throw new n.mV(`The container metadata credential provider cannot be used unless the ${h} or ${f} environment variable is set`,!1)};var S=a(8690);class g extends n.mV{constructor(e,t=!0){super(e,t),this.tryNextLink=t,this.name="InstanceMetadataV1FallbackError",Object.setPrototypeOf(this,g.prototype)}}var y,T=a(631);!function(e){e.IPv4="http://169.254.169.254",e.IPv6="http://[fd00:ec2::254]"}(y||(y={}));const b={environmentVariableSelector:e=>e.AWS_EC2_METADATA_SERVICE_ENDPOINT,configFileSelector:e=>e.ec2_metadata_service_endpoint,default:void 0};var D;!function(e){e.IPv4="IPv4",e.IPv6="IPv6"}(D||(D={}));const M={environmentVariableSelector:e=>e.AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE,configFileSelector:e=>e.ec2_metadata_service_endpoint_mode,default:D.IPv4},C=async()=>(0,T.e)(await V()||await x()),V=async()=>(0,S.M)(b)(),x=async()=>{const e=await(0,S.M)(M)();switch(e){case D.IPv4:return y.IPv4;case D.IPv6:return y.IPv6;default:throw new Error(`Unsupported endpoint mode: ${e}. Select from ${Object.values(D)}`)}},N=(e,t)=>{const a=300+Math.floor(300*Math.random()),n=new Date(Date.now()+1e3*a);t.warn(`Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(n)}.\nFor more information, please visit: https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html`);const r=e.originalExpiration??e.expiration;return{...e,...r?{originalExpiration:r}:{},expiration:n}},R="/latest/meta-data/iam/security-credentials/",k="x-aws-ec2-metadata-token",O=(e={})=>((e,t={})=>{const a=t?.logger||console;let n;return async()=>{let t;try{t=await e(),t.expiration&&t.expiration.getTime()<Date.now()&&(t=N(t,a))}catch(e){if(!n)throw e;a.warn("Credential renew failed: ",e),t=N(n,a)}return n=t,t}})(P(e),{logger:e.logger}),P=e=>{let t=!1;const{logger:a,profile:r}=e,{timeout:o,maxRetries:s}=p(e),i=async(a,o)=>{if(t||null==o.headers?.[k]){let t=!1,a=!1;const o=await(0,S.M)({environmentVariableSelector:e=>{const t=e.AWS_EC2_METADATA_V1_DISABLED;if(a=!!t&&"false"!==t,void 0===t)throw new n.mV("AWS_EC2_METADATA_V1_DISABLED not set in env, checking config file next.");return a},configFileSelector:e=>{const a=e.ec2_metadata_v1_disabled;return t=!!a&&"false"!==a,t},default:!1},{profile:r})();if(e.ec2MetadataV1Disabled||o){const n=[];throw e.ec2MetadataV1Disabled&&n.push("credential provider initialization (runtime option ec2MetadataV1Disabled)"),t&&n.push("config file profile (ec2_metadata_v1_disabled)"),a&&n.push("process environment variable (AWS_EC2_METADATA_V1_DISABLED)"),new g(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${n.join(", ")}].`)}}const s=(await u((async()=>{let e;try{e=await U(o)}catch(e){throw 401===e.statusCode&&(t=!1),e}return e}),a)).trim();return u((async()=>{let e;try{e=await W(s,o)}catch(e){throw 401===e.statusCode&&(t=!1),e}return e}),a)};return async()=>{const e=await C();if(t)return a?.debug("AWS SDK Instance Metadata","using v1 fallback (no token fetch)"),i(s,{...e,timeout:o});{let n;try{n=(await L({...e,timeout:o})).toString()}catch(n){if(400===n?.statusCode)throw Object.assign(n,{message:"EC2 Metadata token request returned error"});return("TimeoutError"===n.message||[403,404,405].includes(n.statusCode))&&(t=!0),a?.debug("AWS SDK Instance Metadata","using v1 fallback (initial)"),i(s,{...e,timeout:o})}return i(s,{...e,headers:{[k]:n},timeout:o})}}},L=async e=>i({...e,path:"/latest/api/token",method:"PUT",headers:{"x-aws-ec2-metadata-token-ttl-seconds":"21600"}}),U=async e=>(await i({...e,path:R})).toString(),W=async(e,t)=>{const a=JSON.parse((await i({...t,path:R+e})).toString());if(!c(a))throw new n.mV("Invalid response received from instance metadata service.");return d(a)}}};
//# sourceMappingURL=634.js.map